{"ast":null,"code":"var _jsxFileName = \"/Users/Oiver/React-Decode/DecodeApp/src/Traffic.js\";\nimport React from \"react\";\nimport { GeoJSON, Marker } from \"react-leaflet\";\nimport L from 'leaflet';\nimport geoTest from './intersection-counts-2010-2017-mod.geojson';\nconsole.log(geoTest);\n\nconst geoFile = require(\"./intersection-counts-2010-2017-mod.geojson\");\n\nlet result;\nexport default class Traffic extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onMouseOut = e => {\n      console.log(\"onMouseOut\", e);\n    };\n\n    this.onMouseOver = e => {\n      console.log(\"onMouseOver\", e.layer.feature.properties.name);\n    };\n\n    this.onClick = e => {\n      console.log(\"onClick\", e);\n    };\n\n    this.state = {\n      geojson: undefined,\n      data: undefined,\n      loadedOnce: false\n    };\n  }\n\n  getColor(val) {\n    let color;\n\n    if (val >= 1000) {\n      color = 'red';\n    } else if (val >= 500) {\n      color = 'green';\n    } else {\n      color = 'blue';\n    }\n\n    console.log(color);\n    return color;\n  }\n\n  pointToLayer(feature, latlng) {\n    console.log(feature);\n    return L.circleMarker(latlng, {\n      fillOpacity: 0.1,\n      opacity: 0,\n      weight: 0,\n      color: this.getColor(feature.properties.pk_hr_vol)\n    }); // Change marker to circle\n  }\n\n  componentDidMount() {\n    let test = [];\n\n    if (this.state.loadedOnce === false) {\n      fetch(geoFile).then(res => res.json()).then(data => {\n        console.log(data);\n        test = data.features;\n        this.setState({\n          data: test,\n          loadedOnce: true\n        });\n      }).catch(console.log);\n    }\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  style(feature) {\n    return {\n      color: '#06406F',\n      opacity: 1,\n      fillColor: '#DDDDFF',\n      fillOpacity: 0.9,\n      weight: 3,\n      radius: 6,\n      clickable: true\n    };\n  }\n\n  render() {\n    let featuresObj = {\n      \"type\": \"FeatureCollection\",\n      \"features\": this.state.data\n    }; // helps parse CSV files\n    // const papaparseOptions = {\n    //     header: true,\n    //     dynamicTyping: true,\n    //     skipEmptyLines: true,\n    //     transformHeader: header =>\n    //       header\n    //         .toLowerCase()\n    //         .replace(/\\W/g, '_')\n    //   }\n\n    return this.state.data ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(GeoJSON, {\n      data: featuresObj,\n      pointToLayer: this.pointToLayer.bind(this) // color=\"red\"\n      // onMouseOver={this.onMouseOver.bind(this)} \n      // onMouseOut={this.onMouseOut.bind(this)}\n      ,\n      onClick: this.onClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })) : null;\n  }\n\n}","map":{"version":3,"sources":["/Users/Oiver/React-Decode/DecodeApp/src/Traffic.js"],"names":["React","GeoJSON","Marker","L","geoTest","console","log","geoFile","require","result","Traffic","Component","constructor","props","onMouseOut","e","onMouseOver","layer","feature","properties","name","onClick","state","geojson","undefined","data","loadedOnce","getColor","val","color","pointToLayer","latlng","circleMarker","fillOpacity","opacity","weight","pk_hr_vol","componentDidMount","test","fetch","then","res","json","features","setState","catch","componentDidUpdate","style","fillColor","radius","clickable","render","featuresObj","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { GeoJSON, Marker } from \"react-leaflet\";\r\nimport L from 'leaflet';\r\nimport geoTest from './intersection-counts-2010-2017-mod.geojson';\r\n\r\nconsole.log(geoTest);\r\n\r\nconst geoFile = require(\"./intersection-counts-2010-2017-mod.geojson\");\r\nlet result;\r\n\r\nexport default class Traffic extends React.Component {\r\n constructor(props) {\r\n   super(props);\r\n   this.state = {\r\n     geojson: undefined,\r\n     data: undefined,\r\n     loadedOnce: false\r\n   };\r\n }\r\n\r\ngetColor(val) {\r\n    let color;\r\n    if (val >= 1000) {\r\n        color = 'red';\r\n    }\r\n    else if (val >= 500) {\r\n        color = 'green';\r\n    }\r\n    else {\r\n    color = 'blue';\r\n    }\r\n    console.log(color);\r\n    return color;\r\n}\r\n\r\n pointToLayer(feature, latlng) {\r\n    console.log(feature);\r\n    return L.circleMarker(latlng, {fillOpacity: 0.1, opacity:0, weight: 0, color: this.getColor(feature.properties.pk_hr_vol)}); // Change marker to circle\r\n }\r\n\r\n\r\n componentDidMount() {\r\n     let test = [];\r\n     if (this.state.loadedOnce===false) {\r\n     fetch(geoFile)\r\n     .then(res => res.json())\r\n     .then((data) => {\r\n         console.log(data);\r\n         test = data.features;\r\n         this.setState({ data: test, loadedOnce: true })\r\n        })\r\n    .catch(console.log);\r\n     }\r\n }\r\n\r\ncomponentDidUpdate() {\r\n    console.log(this.state);\r\n}\r\n\r\n onMouseOut = (e) => {\r\n     console.log(\"onMouseOut\", e);\r\n }\r\n\r\n onMouseOver = (e) => {\r\n     console.log(\"onMouseOver\", e.layer.feature.properties.name);\r\n }\r\n\r\n onClick = (e) => {\r\n     console.log(\"onClick\", e);\r\n }\r\n\r\n\r\n\r\n  style(feature) {\r\n    return {\r\n        color: '#06406F',\r\n        opacity: 1,\r\n        fillColor: '#DDDDFF',\r\n        fillOpacity: 0.9,\r\n        weight: 3,\r\n        radius: 6,\r\n        clickable: true\r\n    }\r\n}\r\n\r\n render() {\r\n    let featuresObj = {\r\n        \"type\": \"FeatureCollection\",\r\n        \"features\": this.state.data\r\n    }\r\n\r\n    // helps parse CSV files\r\n    // const papaparseOptions = {\r\n    //     header: true,\r\n    //     dynamicTyping: true,\r\n    //     skipEmptyLines: true,\r\n    //     transformHeader: header =>\r\n    //       header\r\n    //         .toLowerCase()\r\n    //         .replace(/\\W/g, '_')\r\n    //   }\r\n\r\n   return this.state.data ? \r\n    <div>\r\n    <GeoJSON \r\n        data={featuresObj} \r\n        pointToLayer={this.pointToLayer.bind(this)}\r\n        // color=\"red\"\r\n        // onMouseOver={this.onMouseOver.bind(this)} \r\n        // onMouseOut={this.onMouseOut.bind(this)}\r\n        onClick={this.onClick.bind(this)}\r\n        \r\n    /> \r\n    </div>\r\n    : null;\r\n }\r\n}"]},"metadata":{},"sourceType":"module"}