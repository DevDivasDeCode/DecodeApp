{"ast":null,"code":"var _jsxFileName = \"/Users/Oiver/React-Decode/DecodeApp/src/Castles.js\";\nimport React from \"react\";\nimport { GeoJSON, Marker } from \"react-leaflet\";\nimport * as overpass from \"query-overpass\";\nexport default class Castles extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataHandler = (error, osmData) => {\n      if (!error && osmData.features !== undefined) {\n        this.setState({\n          geojson: osmData\n        });\n      }\n    };\n\n    this.state = {\n      geojson: undefined\n    };\n  }\n\n  componentDidMount() {\n    const query = \"[out:json];(way[historic=castle](around:10000, 50.0874654,14.4212535);                             relation[historic=castle](around:10000, 50.0874654,14.4212535););                             out body;>;out skel qt;\";\n    const options = {\n      flatProperties: true\n    };\n    overpass(query, this.dataHandler, options);\n  }\n\n  render() {\n    return this.state.geojson ? React.createElement(GeoJSON, {\n      data: this.state.geojson,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }) : null;\n  }\n\n}","map":{"version":3,"sources":["/Users/Oiver/React-Decode/DecodeApp/src/Castles.js"],"names":["React","GeoJSON","Marker","overpass","Castles","Component","constructor","props","dataHandler","error","osmData","features","undefined","setState","geojson","state","componentDidMount","query","options","flatProperties","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,eAAhC;AACA,OAAO,KAAKC,QAAZ,MAA0B,gBAA1B;AAEA,eAAe,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBnBC,WAjBmB,GAiBL,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAChC,UAAI,CAACD,KAAD,IAAUC,OAAO,CAACC,QAAR,KAAqBC,SAAnC,EAA8C;AAC5C,aAAKC,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAEJ;AAAX,SAAd;AACD;AACF,KArBkB;;AAEjB,SAAKK,KAAL,GAAa;AACXD,MAAAA,OAAO,EAAEF;AADE,KAAb;AAGD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,KAAK,6NAAX;AAGA,UAAMC,OAAO,GAAG;AACdC,MAAAA,cAAc,EAAE;AADF,KAAhB;AAGAhB,IAAAA,QAAQ,CAACc,KAAD,EAAQ,KAAKT,WAAb,EAA0BU,OAA1B,CAAR;AACD;;AAQDE,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKL,KAAL,CAAWD,OAAX,GAAqB,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB,GAA6D,IAApE;AACD;;AA1BmD","sourcesContent":["import React from \"react\";\nimport { GeoJSON, Marker } from \"react-leaflet\";\nimport * as overpass from \"query-overpass\";\n\nexport default class Castles extends React.Component {\n constructor(props) {\n   super(props);\n   this.state = {\n     geojson: undefined\n   };\n }\n\n componentDidMount() {\n   const query = `[out:json];(way[historic=castle](around:10000, 50.0874654,14.4212535);\\\n                             relation[historic=castle](around:10000, 50.0874654,14.4212535););\\\n                             out body;>;out skel qt;`;\n   const options = {\n     flatProperties: true\n   };\n   overpass(query, this.dataHandler, options);\n }\n\n dataHandler = (error, osmData) => {\n   if (!error && osmData.features !== undefined) {\n     this.setState({ geojson: osmData });\n   }\n };\n\n render() {\n   return this.state.geojson ? <GeoJSON data={this.state.geojson} /> : null;\n }\n}"]},"metadata":{},"sourceType":"module"}